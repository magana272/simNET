#pragma once
#include <stdlib.h>
#include <stdio.h>
#define EulerNumber 2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274274663919320030599218174135966290435729003342526059563073813232862794349076323382988075319525101901157383418793070215408914993488416750924476146066808226480016847741185374234544243710753907774499206955170276183860626133138458300075204493382656029760673711320070932870912744374704723069697720931014169283681902551510865746377211125238978442505695369677078544996996794686445490598793163688923009879312773617821542499922957635148220826989519366803318252886939849646510582093923982948879332036250944311730123819706841614039701983767932068328237646480429531180232878250981945581530175671736133206981125099
typedef struct mymatrix
{  int col; 
   int row;
   double** matrix_t; 
} mat;

mat* mycreateEmptyMatrix(int m, int n);
mat* arrayToMatrix(double *arr, int row, int col);
mat* mat_mul(mat *A, mat *B);
mat* mat_add(mat *A, mat *B);
void mat_add_inplace(mat *A, mat *B);
//  the contains will be in A
mat* mat_sub(mat *A, mat *B);
void mat_sub_inplace(mat *A, mat *B);
// contents will be in A 
mat* mat_inverse(mat *A); 
void printMat(mat *A);
void free_mat(mat* A);
mat* randomMatrix(int row, int col);
mat* matTranspose(mat * mat);
